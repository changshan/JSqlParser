/* Generated By:JJTree&JavaCC: Do not edit this line. SmartQLParserTokenManager.java */
package com.xiaomi.smartql.parser;
import net.sf.jsqlparser.parser.feature.*;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.analyze.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.alter.sequence.*;
import net.sf.jsqlparser.statement.comment.*;
import net.sf.jsqlparser.statement.create.function.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.procedure.*;
import net.sf.jsqlparser.statement.create.schema.*;
import net.sf.jsqlparser.statement.create.synonym.*;
import net.sf.jsqlparser.statement.create.sequence.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.show.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import net.sf.jsqlparser.statement.values.*;
import net.sf.jsqlparser.statement.grant.*;
import java.util.*;

/** Token Manager. */
public class SmartQLParserTokenManager implements SmartQLParserConstants
{
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 3;
         }
         if ((active4 & 0x247fe00L) != 0L || (active5 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 252;
         }
         if ((active2 & 0xfbf8000000000000L) != 0L || (active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 318;
            return 25;
         }
         if ((active0 & 0x7fbffcL) != 0L || (active1 & 0xbfe1ffffd0000000L) != 0L || (active2 & 0x1ffffffL) != 0L || (active3 & 0x1c000L) != 0L || (active4 & 0x81fffc000000L) != 0L || (active5 & 0x22fc00000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 52;
         }
         if ((active3 & 0x3ffeL) != 0L)
         {
            jjmatchedKind = 318;
            return 18;
         }
         if ((active5 & 0x200000000L) != 0L)
            return 243;
         if ((active5 & 0x8c204000L) != 0L)
            return 253;
         if ((active5 & 0xc0800L) != 0L)
            return 254;
         if ((active0 & 0x2000000000L) != 0L || (active3 & 0xf800000000000000L) != 0L || (active4 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 318;
            return 183;
         }
         if ((active0 & 0xe400000000000000L) != 0L || (active1 & 0x7fffL) != 0L || (active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 117;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active3 & 0x7ffcfb000000000L) != 0L || (active4 & 0xb80000L) != 0L)
         {
            jjmatchedKind = 318;
            return 160;
         }
         if ((active5 & 0x300003000000L) != 0L)
            return 48;
         if ((active4 & 0x3e0000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 41;
         }
         if ((active5 & 0x20000000L) != 0L)
            return 255;
         if ((active3 & 0x300ffffe0000L) != 0L || (active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 251;
         }
         if ((active2 & 0x7ffec00000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 91;
         }
         if ((active5 & 0x1000000000L) != 0L)
            return 256;
         if ((active0 & 0xdf800000L) != 0L || (active1 & 0xfff8000L) != 0L)
         {
            jjmatchedKind = 318;
            return 257;
         }
         if ((active5 & 0x80L) != 0L)
            return 37;
         if ((active0 & 0x3ff7fdf20000000L) != 0L || (active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 258;
         }
         if ((active5 & 0x100002000L) != 0L)
            return 259;
         if ((active1 & 0x1e000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 6;
         }
         if ((active2 & 0x3fe000000L) != 0L)
         {
            jjmatchedKind = 318;
            return 108;
         }
         return -1;
      case 1:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active3 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 171;
         }
         if ((active0 & 0x2000000000L) != 0L || (active4 & 0x70L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 203;
         }
         if ((active2 & 0x300000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 107;
         }
         if ((active0 & 0xe7ff7fdf6fc7bffcL) != 0L || (active1 & 0x41cfffffdffff3ffL) != 0L || (active2 & 0x310300043fffbfe0L) != 0L || (active3 & 0xff7fb03fffffffffL) != 0L || (active4 & 0xfffffeffff81L) != 0L || (active5 & 0x7c8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active4 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 182;
         }
         if ((active2 & 0xc0000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 112;
         }
         if ((active2 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 90;
         }
         if ((active2 & 0xc000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 24;
         }
         if ((active3 & 0x4f8000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 1;
            }
            return 159;
         }
         if ((active0 & 0x90380000L) != 0L || (active1 & 0xbe20000000000c00L) != 0L || (active2 & 0xafcffe00000401fL) != 0L || (active4 & 0xcL) != 0L || (active5 & 0x27000000000000L) != 0L)
            return 52;
         return -1;
      case 2:
         if ((active4 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 2;
            }
            return 189;
         }
         if ((active2 & 0xc0000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 2;
            }
            return 111;
         }
         if ((active0 & 0xe7ff7fffebc71bdcL) != 0L || (active1 & 0xfd9fff87dffbf87fL) != 0L || (active2 & 0x39879fc73f7f8ff7L) != 0L || (active3 & 0xffffb7b3ffffffffL) != 0L || (active4 & 0xc1fffef9fff1L) != 0L || (active5 & 0x7e8000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 2;
            }
            return 52;
         }
         if ((active2 & 0xc000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 2;
            }
            return 23;
         }
         if ((active2 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 2;
            }
            return 89;
         }
         if ((active0 & 0x420a420L) != 0L || (active1 & 0x40007800040380L) != 0L || (active2 & 0x30600000803000L) != 0L || (active3 & 0x480c00000000L) != 0L || (active4 & 0x3e0000060008L) != 0L)
            return 52;
         return -1;
      case 3:
         if ((active2 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return 110;
         }
         if ((active4 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return 188;
         }
         if ((active2 & 0xc000000000000000L) != 0L)
            return 22;
         if ((active0 & 0xe7ff7ba263c71bdcL) != 0L || (active1 & 0xfd9ffc77df3a4873L) != 0L || (active2 & 0x3824dfc7bf330013L) != 0L || (active3 & 0x3fc73733fffbfff7L) != 0L || (active4 & 0x380c7ef9feb0L) != 0L || (active5 & 0x7e0000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return 52;
         }
         if ((active0 & 0x45d88000000L) != 0L || (active1 & 0x38000c1b00cL) != 0L || (active2 & 0x1830000004cafe4L) != 0L || (active3 & 0xc038c08800040008L) != 0L || (active4 & 0xc1f380040141L) != 0L || (active5 & 0x8000000000000L) != 0L)
            return 52;
         if ((active2 & 0x800000000L) != 0L)
            return 88;
         return -1;
      case 4:
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x340080020850800L) != 0L || (active1 & 0x3101f01390000000L) != 0L || (active2 & 0x1802000066300000L) != 0L || (active3 & 0x384010010082e420L) != 0L || (active4 & 0x418400400L) != 0L)
            return 52;
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 4;
            }
            return 21;
         }
         if ((active0 & 0xe4bf73ea434213dcL) != 0L || (active1 & 0xcc9e0e644fba487bL) != 0L || (active2 & 0x2024dfc799030793L) != 0L || (active3 & 0x7872732ff791bd7L) != 0L || (active4 & 0x38c866b9fab3L) != 0L || (active5 & 0x5e0000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 4;
            }
            return 52;
         }
         return -1;
      case 5:
         if ((active0 & 0xe43e126a41421340L) != 0L || (active1 & 0x4c1cc6240ea04079L) != 0L || (active2 & 0xdcc69d030783L) != 0L || (active3 & 0x2872712ed390bd7L) != 0L || (active4 & 0x2880663932b3L) != 0L || (active5 & 0x5e0000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 5;
            }
            return 52;
         }
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 5;
            }
            return 20;
         }
         if ((active0 & 0x8161800200009cL) != 0L || (active1 & 0x80820840411a0802L) != 0L || (active2 & 0x2024030100000010L) != 0L || (active3 & 0x3500002012401000L) != 0L || (active4 & 0x10481080c800L) != 0L)
            return 52;
         return -1;
      case 6:
         if ((active0 & 0xa024026800400200L) != 0L || (active1 & 0x4804c60404004068L) != 0L || (active2 & 0x80008c0299000783L) != 0L || (active3 & 0x20030312e9380987L) != 0L || (active4 & 0x800063912b1L) != 0L || (active5 & 0x5e0000000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 6;
            }
            return 52;
         }
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x441a510241021140L) != 0L || (active1 & 0x41800200aa00011L) != 0L || (active2 & 0x50c404030000L) != 0L || (active3 & 0x284240004010250L) != 0L || (active4 & 0x208060002002L) != 0L)
            return 52;
         return -1;
      case 7:
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa030024000400200L) != 0L || (active1 & 0x4804800400004020L) != 0L || (active2 & 0x8c0009000781L) != 0L || (active3 & 0x2000021088380984L) != 0L || (active4 & 0x80000380201L) != 0L || (active5 & 0x4e0000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 7;
            }
            return 52;
         }
         if ((active0 & 0x4002800000000L) != 0L || (active1 & 0x460004000048L) != 0L || (active2 & 0x8000000290000002L) != 0L || (active3 & 0x3010261000003L) != 0L || (active4 & 0x60110b0L) != 0L || (active5 & 0x100000000000000L) != 0L)
            return 52;
         return -1;
      case 8:
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4000000200L) != 0L || (active1 & 0x800000400004000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x21088100984L) != 0L || (active4 & 0x200201L) != 0L)
            return 52;
         if ((active0 & 0xa030020000400000L) != 0L || (active1 & 0x4004800000000020L) != 0L || (active2 & 0x8c0009000780L) != 0L || (active3 & 0x2000000040280000L) != 0L || (active4 & 0x80000180000L) != 0L || (active5 & 0x5e0000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 8;
            return 52;
         }
         return -1;
      case 9:
         if ((active0 & 0x2010000000400000L) != 0L || (active1 & 0x4004800000000000L) != 0L || (active2 & 0x9000180L) != 0L || (active4 & 0x80000180000L) != 0L || (active5 & 0xa0000000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 9;
            }
            return 52;
         }
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8020020000000000L) != 0L || (active1 & 0x20L) != 0L || (active2 & 0x8c0000000600L) != 0L || (active3 & 0x2000000040280000L) != 0L || (active5 & 0x140000000000000L) != 0L)
            return 52;
         return -1;
      case 10:
         if ((active0 & 0x2010000000400000L) != 0L || (active1 & 0x4004800000000000L) != 0L || (active2 & 0x9000400L) != 0L || (active4 & 0x80000180000L) != 0L || (active5 & 0xc0000000000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return 52;
         }
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active2 & 0x180L) != 0L)
            return 52;
         return -1;
      case 11:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2010000000400000L) != 0L || (active1 & 0x4004000000000000L) != 0L || (active2 & 0x500L) != 0L || (active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 11;
            return 52;
         }
         if ((active5 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x800000000000L) != 0L || (active2 & 0x9000000L) != 0L || (active4 & 0x80000100000L) != 0L)
            return 52;
         return -1;
      case 12:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2010000000000000L) != 0L || (active2 & 0x100L) != 0L || (active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 12;
            return 52;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x4004000000000000L) != 0L || (active2 & 0x400L) != 0L)
            return 52;
         return -1;
      case 13:
         if ((active0 & 0x10000000000000L) != 0L || (active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 13;
            return 52;
         }
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x100L) != 0L)
            return 52;
         return -1;
      case 14:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 14;
            return 52;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 52;
         return -1;
      case 15:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 15;
            return 52;
         }
         return -1;
      case 16:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 16;
            return 52;
         }
         return -1;
      case 17:
         if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 17;
            return 52;
         }
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x80000L) != 0L)
            return 52;
         return -1;
      case 19:
         if ((active5 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 318;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 331;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc0000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc00000000000L);
      case 37:
         return jjStopAtPos(0, 354);
      case 38:
         jjmatchedKind = 350;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 324);
      case 41:
         return jjStopAtPos(0, 325);
      case 42:
         return jjStopAtPos(0, 329);
      case 43:
         return jjStopAtPos(0, 332);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 344;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x300002000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 327, 37);
      case 47:
         return jjStartNfaWithStates_0(0, 353, 243);
      case 58:
         jjmatchedKind = 328;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40010000000L);
      case 59:
         return jjStopAtPos(0, 304);
      case 60:
         jjmatchedKind = 334;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8c200000L);
      case 61:
         jjmatchedKind = 326;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000000L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 333;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L);
      case 63:
         jjmatchedKind = 330;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc00000L);
      case 64:
         jjmatchedKind = 363;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x108000L);
      case 91:
         return jjStartNfaWithStates_0(0, 356, 256);
      case 93:
         return jjStopAtPos(0, 357);
      case 94:
         return jjStopAtPos(0, 355);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fbffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xdf800000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3ff7fdf20000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe400000000000000L, 0x7fffL, 0x0L, 0x0L, 0x0L, 0x80000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff8000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffd0000000L, 0x4000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xbfe0000000000000L, 0x1fL, 0x0L, 0x0L, 0x27000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7e0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3800L, 0x0L, 0x0L, 0x200000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff8000L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fe000000L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ffec00000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfbf8000000000000L, 0x1L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ffeL, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1c000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x300ffffe0000L, 0x0L, 0x100000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L, 0x7ffcfb000000000L, 0xb80000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L, 0xf800000000000000L, 0x1ffL, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x247fe00L, 0x400000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xfc000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1ff00000000L, 0x8000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3e0000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000L, 0x0L);
      case 123:
         jjmatchedKind = 372;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x34000000000L);
      case 124:
         return jjStartNfaWithStates_0(0, 349, 255);
      case 125:
         return jjStopAtPos(0, 359);
      case 126:
         jjmatchedKind = 336;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active5 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 345);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000L);
      case 38:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active5 & 0x800000L) != 0L)
            return jjStopAtPos(1, 343);
         break;
      case 42:
         if ((active5 & 0x20000L) != 0L)
            return jjStopAtPos(1, 337);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000L);
      case 58:
         if ((active5 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 362);
         break;
      case 60:
         if ((active5 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 351);
         break;
      case 61:
         if ((active5 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 348);
         break;
      case 62:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         else if ((active5 & 0x100000L) != 0L)
            return jjStopAtPos(1, 340);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 352);
         else if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xa00000000000L);
      case 64:
         if ((active5 & 0x8000L) != 0L)
            return jjStopAtPos(1, 335);
         else if ((active5 & 0x200000L) != 0L)
            return jjStopAtPos(1, 341);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f20000000L, active1, 0x2000100000000L, active2, 0x41e018000L, active3, 0x380000100002000eL, active4, 0x40013c000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000004L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active5 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 358);
         return jjMoveStringLiteralDfa2_0(active0, 0xe0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc400000001800000L, active1, 0x1000000fL, active2, 0x820063800L, active3, 0x80007f80ff7c0010L, active4, 0x40000001L, active5, 0x100000000000000L);
      case 70:
      case 102:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 117, 52);
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x30000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c000000000L, active1, 0L, active2, 0L, active3, 0x4001800000000000L, active4, 0x600000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0x4c0000c00000f0L, active2, 0xc0580000L, active3, 0xe000100000020L, active4, 0xf880800002L, active5, 0x288000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000e00L, active1, 0x100080200008000L, active2, 0L, active3, 0x800040L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10200L, active2, 0L, active3, 0L, active4, 0x3a0000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 142, 52);
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xb000L, active1, 0xbc00000000060000L, active2, 0x80000000000007L, active3, 0L, active4, 0x2013e00L, active5, 0x427000000000000L);
      case 79:
      case 111:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7f700008000000L, active1, 0x10007c00000800L, active2, 0x4ffc301a00020L, active3, 0x20000e00000000L, active4, 0x850000000008L, active5, 0x40000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0x100000000000000L, active3, 0x1L, active4, 0xc000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x380000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180002000060000L, active1, 0xf08000001000L, active2, 0x800000000000000L, active3, 0xf80L, active4, 0x70L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x80000L, active2, 0x7d0L, active3, 0L, active4, 0x460000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 52);
         else if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0x20000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400000L, active1, 0x1070000006000L, active2, 0x3003000000000000L, active3, 0x8000000001f000L, active4, 0x80L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff00000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000080000000L, active1, 0L, active2, 0L, active3, 0x600000000000000L, active4, 0x100L, active5, 0L);
      case 124:
         if ((active5 & 0x400000L) != 0L)
            return jjStopAtPos(1, 342);
         break;
      case 126:
         if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x7000000000000L);
      case 42:
         if ((active5 & 0x80000L) != 0L)
            return jjStopAtPos(2, 339);
         break;
      case 62:
         if ((active5 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 346);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 347);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 365);
         else if ((active5 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 367);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200005c000001100L, active1, 0x1100000020000L, active2, 0x20000L, active3, 0x40000000040040L, active4, 0x10L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3802000000001000L, active4, 0x200L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x600000020020000L, active1, 0xc00000000380000L, active2, 0xc000200000L, active3, 0x180000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 52);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 52);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x800000100000000L, active3, 0L, active4, 0x4000L, active5, 0L);
      case 69:
      case 101:
         if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80020000000000L, active1, 0xc00000L, active2, 0xc100000000000800L, active3, 0x4000000000004180L, active4, 0x680040000L, active5, 0L);
      case 70:
      case 102:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 52);
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000040000000L, active1, 0L, active2, 0x20000000040000L, active3, 0x200000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 151, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x800200L, active1, 0x4000000000000L, active2, 0L, active3, 0x101400000L, active4, 0x800000L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000001010000L, active2, 0x20L, active3, 0x110000000818600L, active4, 0x100400c00L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000080000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 52);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 52);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 52);
         else if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x700100000000L, active1, 0x30540000003L, active2, 0x83020000000000L, active3, 0x200000000L, active4, 0x38001c381000L, active5, 0x200000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0x2000L, active2, 0xc0000100000L, active3, 0x8024008000000000L, active4, 0x400000000083L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c000002000000L, active1, 0x2080040000000000L, active2, 0xc0400010L, active3, 0x200000002020000L, active4, 0x800800000000L, active5, 0x40000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080000000000L, active1, 0xe88000001000L, active2, 0x1000000007c0L, active3, 0x800000000800L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 259, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x10000002004000L, active2, 0L, active3, 0x20004000000L, active4, 0x2100L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000L, active4, 0x10000L, active5, 0x400000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 298, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x4000007080000000L, active2, 0x20000000L, active3, 0x2016L, active4, 0x10060000000L, active5, 0L);
      case 83:
      case 115:
         if ((active5 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 361);
         return jjMoveStringLiteralDfa3_0(active0, 0x40001e00000004L, active1, 0x800800000000807cL, active2, 0x8000L, active3, 0x480340078000000L, active4, 0x2008000L, active5, 0x180000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 52);
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x89400818L, active1, 0x1c000000L, active2, 0x300040040e010007L, active3, 0x400080000009L, active4, 0xf000000000L, active5, 0x8000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000800L, active2, 0L, active3, 0x1000000000000L, active4, 0x60L, active5, 0L);
      case 86:
      case 118:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x2000000000000L, active2, 0x800200000000L, active3, 0x1000000020L, active4, 0L, active5, 0x20000000000000L);
      case 87:
      case 119:
         if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000001000000L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x810000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 52);
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002000000000L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0x380000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000002040040L, active1, 0x4000000000080011L, active2, 0x4844000200000L, active3, 0x20002000002L, active4, 0x100000004000L, active5, 0x20000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000020800L, active2, 0L, active3, 0L, active4, 0x40000080L, active5, 0x4000000000000L);
      case 67:
      case 99:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000000L, active1, 0x41010800028L, active2, 0x6000000L, active3, 0x89d0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 210, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 52);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 52);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 52);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 243, 52);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 245, 52);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 262, 52);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 264, 52);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 303, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000800000804L, active1, 0xb000002004100002L, active2, 0x1800010208010003L, active3, 0x103000610000L, active4, 0x8002L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000040000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0x22000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 52);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 195, 52);
         else if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20420000L, active1, 0x4000000000000L, active2, 0x400000000000L, active3, 0x100000000L, active4, 0xe000000000L, active5, 0x8000000000000L);
      case 73:
      case 105:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 231, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x800198L, active1, 0x2000000000000L, active2, 0x80100100000L, active3, 0x4000001000001L, active4, 0x6012010L, active5, 0L);
      case 75:
      case 107:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 52);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 296, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 52);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 302, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x600100000011000L, active1, 0x400020402204000L, active2, 0x2000000000000L, active3, 0x3802000204001000L, active4, 0L, active5, 0x200000000000000L);
      case 77:
      case 109:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L, active1, 0x4000000000L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 52);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 52);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 52);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 289, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x18018000000000L, active1, 0x100000000000L, active2, 0x780L, active3, 0L, active4, 0xc00020L, active5, 0x3000000000000L);
      case 79:
      case 111:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x80000000000000L, active2, 0x20000000000L, active3, 0x200000000000420L, active4, 0x1600L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 52);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 52);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 52);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 244, 52);
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0x2000000000000000L, active3, 0x80000000000000L, active4, 0x1L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 274, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x801000008000000L, active2, 0x8000100000000000L, active3, 0x40000000004000L, active4, 0x400000000L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 52);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 227, 52);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 238, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x120080000000000L, active1, 0x381000000L, active2, 0x20000000000000L, active3, 0x40000000000L, active4, 0x80000000000L, active5, 0x40000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 52);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 52);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 52);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 52);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 88);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 288, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x8000040000040L, active2, 0L, active3, 0x501200060000004L, active4, 0x200000000000L, active5, 0x180000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000L, active1, 0xe00000000000L, active2, 0x440000010L, active3, 0x10098100000L, active4, 0x18000000L, active5, 0x400000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x90000000L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 52);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 287, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 183, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x80000L, active4, 0x20000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0x208000000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0x780L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400104200000000L, active1, 0x8400a000000L, active2, 0x90000000L, active3, 0x200004000200L, active4, 0L, active5, 0x3000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0x2c000000000L, active3, 0x100000000080000L, active4, 0x280020L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x1000000000000L, active4, 0x4000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 52);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 52);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 52);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 52);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 52);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 52);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 52);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 205, 52);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 209, 52);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 215, 52);
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 290, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x1a000041000000L, active1, 0x800000040000000L, active2, 0x20010000000000L, active3, 0x3480010000000890L, active4, 0x280010810000L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 278, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100002001000L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 52);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 52);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000020000L, active1, 0x4010002000004040L, active2, 0x4400000020000L, active3, 0x2040000001144L, active4, 0x4020000000L, active5, 0x400000000000000L);
      case 75:
      case 107:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x20800L, active2, 0x8000800000000010L, active3, 0x4000000000002L, active4, 0x90L, active5, 0x20000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000000L, active1, 0L, active2, 0x200000000L, active3, 0x201a000001L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 52);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 266, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x144L, active1, 0x2000004000000L, active2, 0x80000000000L, active3, 0x200000000000000L, active4, 0x100000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008L, active1, 0x8000400000020L, active2, 0L, active3, 0L, active4, 0x8840000003L, active5, 0x4000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000180000L, active2, 0x1000000L, active3, 0x1000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 52);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 52);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 187, 52);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 52);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000002000200L, active1, 0x8080000000000008L, active2, 0x408010003L, active3, 0x200e0300000L, active4, 0x8000L, active5, 0x180000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 52);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 52);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 177, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L, active3, 0x1010000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 52);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 52);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 52);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 197, 52);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 52);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 236, 52);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 246, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000000L, active1, 0x60001000002L, active2, 0L, active3, 0L, active4, 0x4000L, active5, 0x40000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x400000000a00000L, active2, 0x2000000000000000L, active3, 0L, active4, 0xa00L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0x400000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 52);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 52);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 206, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 229, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0x8000000400010600L, active3, 0x4020208000000L, active4, 0x4280020L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x18004000000040L, active1, 0x8004000L, active2, 0L, active3, 0x4010000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 279, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x400000004200000L, active2, 0L, active3, 0x880L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 52);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 52);
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 52);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 52);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 52);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 52);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 52);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 52);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 217, 52);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 52);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 267, 52);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 270, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000010001000000L, active1, 0x20000000001L, active2, 0x100204000000L, active3, 0x200000L, active4, 0L, active5, 0x400000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 52);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 300, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000002000000000L, active2, 0L, active3, 0L, active4, 0x1000L, active5, 0L);
      case 72:
      case 104:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 248, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000200L, active1, 0x440002000008L, active2, 0x800008000000L, active3, 0x60000001L, active4, 0x90L, active5, 0x1a0000000000000L);
      case 75:
      case 107:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 52);
         break;
      case 76:
      case 108:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 52);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x10L, active2, 0x8090000000L, active3, 0x80002L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 250, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 52);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 294, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x2400000000000L, active1, 0x10000000000060L, active2, 0x400000020000L, active3, 0x82010080000050L, active4, 0x22000200L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x180L, active3, 0x1041000000000L, active4, 0x102000L, active5, 0x4000000000000L);
      case 80:
      case 112:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 52);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x8420000040400000L, active1, 0x8000000000000L, active2, 0x1000000L, active3, 0x200000000200L, active4, 0x80000000001L, active5, 0x40000000000000L);
      case 83:
      case 115:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 52);
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 284, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L, active2, 0x1L, active3, 0x2000000000100100L, active4, 0x40010000L, active5, 0x200000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 52);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 52);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 52);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 52);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 52);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 52);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 52);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 189, 52);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 271, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x800000L, active2, 0L, active3, 0x1000004L, active4, 0x2000000000L, active5, 0x3000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000002L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0xc0000000002L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 291, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 52);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 160, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8020000000000000L, active1, 0x4000L, active2, 0xc0008000002L, active3, 0L, active4, 0x1L, active5, 0x40000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0x180L, active3, 0x8000000L, active4, 0L, active5, 0x80000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2004000000000000L, active1, 0x800000000040L, active2, 0L, active3, 0x10260000000L, active4, 0x210000L, active5, 0x100000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 52);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 154, 52);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 247, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0x200L, active5, 0x20000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 52);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 52);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 52);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 52);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 52);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 52);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 52);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 52);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 52);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 52);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 166, 52);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 167, 52);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 208, 52);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 52);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 286, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x800000004000000L, active2, 0x1L, active3, 0x1080002L, active4, 0x2001000L, active5, 0x200000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 52);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 145, 52);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 174, 52);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 52);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 285, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x400000000L, active2, 0x1000000L, active3, 0x1080100184L, active4, 0x82000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 52);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0x4000000000000L);
      case 77:
      case 109:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 249, 52);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 52);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 52);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 52);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 234, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000020L, active2, 0x200000000L, active3, 0x200000L, active4, 0x90L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 52);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 242, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0x600L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 52);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 52);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 52);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 52);
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 52);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 52);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 52);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 237, 52);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 257, 52);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 269, 52);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 52);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 301, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x10004000000200L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x4000020L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x90000000L, active3, 0x800L, active4, 0L, active5, 0xb000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 52);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 201, 52);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0x2000000000000000L, active4, 0x80000000000L, active5, 0x20000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0x200000L, active4, 0x180000L, active5, 0x400000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 52);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 268, 52);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 281, 52);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 52);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 156, 52);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 159, 52);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 192, 52);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 232, 52);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 261, 52);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 272, 52);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 282, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0x2000000200L, active5, 0xc000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 52);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 260, 52);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 263, 52);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20020000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x180L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 225, 52);
         break;
      case 76:
      case 108:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 52);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 193, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc0008000000L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 52);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 52);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 240, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000400000000L, active2, 0L, active3, 0x1080000080L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0x1000000L, active3, 0x20000000104L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 216, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x600L, active3, 0x800L, active4, 0x1L, active5, 0x3000000000000L);
      case 83:
      case 115:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 191, 52);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 241, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 52);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 52);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 52);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 52);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 52);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000004000L, active2, 0L, active3, 0x40000000L, active4, 0L, active5, 0x100000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0x600L, active3, 0L, active4, 0x100000L, active5, 0x7000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x20L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 265, 52);
         break;
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 52);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 203, 52);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 212, 52);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 219, 52);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 277, 52);
         else if ((active5 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 318, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x180L, active3, 0x40200000L, active4, 0L, active5, 0x100000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 52);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 199, 52);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 52);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 52);
         break;
      case 78:
      case 110:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 194, 52);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 200, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0x20020000000000L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 52);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 233, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L, active5, 0x8000000000000L);
      case 83:
      case 115:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 293);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 52);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 52);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L, active5, 0xa0000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc0000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 256, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0x180L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 52);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 170, 52);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 171, 52);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 175, 52);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 253, 52);
         else if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 318, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0x80000000000L, active5, 0x200000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x3000000000000L);
      case 78:
      case 110:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 211, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 213, 52);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 69, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000000000000L);
      case 89:
      case 121:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x8000000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x10f000000000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000L, active2, 0x400L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x80000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x8000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0x4000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active4, 0x80000L, active5, 0x200000000000000L);
      case 83:
      case 115:
         if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 318, 52);
         break;
      case 84:
      case 116:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000100L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x80000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x80000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 155, 52);
         break;
      case 69:
      case 101:
         if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 276, 52);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 299, 52);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x8000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x3000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x4000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x200000000000000L) != 0L)
            return jjStopAtPos(11, 377);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 111, 52);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x80000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 152, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4, active5);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x3000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      case 71:
      case 103:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 138, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x100L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 52);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 126, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x80000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0x4000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x80000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x8000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 114, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, 0L, active4, active5);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0x80000L, active5, 0x4000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x80000000000000L);
      case 71:
      case 103:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 136, 52);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 61, 52);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x3000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active2, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x8000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L, active4, active5);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0x80000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x8000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x80000000000000L);
      case 69:
      case 101:
         if ((active5 & 0x4000000000000L) != 0L)
            return jjStopAtPos(14, 370);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x3000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active5, 0x100000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 52, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, 0L, 0L, active4, active5);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x100000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x8000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x80000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active4, 0x80000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active5, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa16_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, 0L, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, 0L, 0L, active4, active5);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x3000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active4, 0x80000L, active5, 0x100000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x8000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active5, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa17_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, 0L, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, active5);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x80000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x3000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x8000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x100000000000000L) != 0L)
            return jjStopAtPos(17, 376);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active4, 0x80000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa18_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, active4, active5);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x3000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x8000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x80000000000000L);
      case 83:
      case 115:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(18, 275, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa19_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active5, 0x3000000000000L);
      case 78:
      case 110:
         if ((active5 & 0x8000000000000L) != 0L)
            return jjStopAtPos(19, 371);
         break;
      case 89:
      case 121:
         if ((active5 & 0x80000000000000L) != 0L)
            return jjStopAtPos(19, 375);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa20_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active5, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa21_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active5, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa22_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active5, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa23_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa24_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa25_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa26_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa27_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa28_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa29_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa30_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa31_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa32_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa33_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa34_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa35_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa36_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, 0L, active5);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa37_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, 0L, active5);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa38_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, 0L, active5);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa39_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, 0L, active5);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa40_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, 0L, active5);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa41_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, 0L, active5);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa42_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, 0L, active5);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa43_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, 0L, active5);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active5, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa44_0(long old5, long active5)
{
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, 0L, active5);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x2000000000000L) != 0L)
            return jjStopAtPos(44, 369);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, 0L, active5);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 252;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
               case 52:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 41:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 39)
                     jjCheckNAdd(42);
                  break;
               case 111:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 5:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 182:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 203:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 257:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 259:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  else if (curChar == 61)
                  {
                     if (kind > 305)
                        kind = 305;
                  }
                  break;
               case 256:
               case 79:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 117:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 188:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 40)
                     jjCheckNAdd(122);
                  break;
               case 20:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 3:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 88:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(93, 101);
                  break;
               case 91:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 255:
               case 34:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 243:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(245, 246);
                  else if (curChar == 47)
                  {
                     if (kind > 316)
                        kind = 316;
                     jjCheckNAdd(49);
                  }
                  break;
               case 251:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 25:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 159:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 252:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 107:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 18:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 90:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 23:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 112:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 160:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 183:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 6:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 89:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 110:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 253:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(228, 229);
                  else if (curChar == 62)
                  {
                     if (kind > 307)
                        kind = 307;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 306)
                        kind = 306;
                  }
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(226, 227);
                  break;
               case 21:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAddStates(10, 16);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 47)
                     jjAddStates(17, 18);
                  else if (curChar == 60)
                     jjCheckNAddStates(19, 22);
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(68, 69);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 46)
                     jjCheckNAdd(37);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(31, 32);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(28, 29);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 254:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  else if (curChar == 61)
                  {
                     if (kind > 308)
                        kind = 308;
                  }
                  break;
               case 189:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 171:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 24:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 108:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 258:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 27:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 61 && kind > 305)
                     kind = 305;
                  break;
               case 30:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 61 && kind > 308)
                     kind = 308;
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 311)
                     kind = 311;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 311)
                     kind = 311;
                  jjCheckNAdd(40);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 39 && kind > 314)
                     kind = 314;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 314)
                     kind = 314;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if (curChar != 45)
                     break;
                  if (kind > 316)
                     kind = 316;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 316)
                     kind = 316;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 54:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 56:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 57:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 58:
                  if (curChar == 39 && kind > 321)
                     kind = 321;
                  break;
               case 59:
                  if (curChar == 39)
                     jjCheckNAddStates(26, 28);
                  break;
               case 60:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 62:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 67:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 34 && kind > 322)
                     kind = 322;
                  break;
               case 70:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(71, 73);
                  break;
               case 71:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(71, 73);
                  break;
               case 72:
                  if (curChar == 36 && kind > 322)
                     kind = 322;
                  break;
               case 73:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 76:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 83:
                  if (curChar == 32)
                     jjAddStates(31, 32);
                  break;
               case 93:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(93, 101);
                  break;
               case 95:
                  if (curChar == 32)
                     jjAddStates(33, 34);
                  break;
               case 121:
                  if (curChar == 40)
                     jjCheckNAdd(122);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 123:
                  if (curChar == 41)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 124:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 128:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(128, 143);
                  break;
               case 130:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(130, 139);
                  break;
               case 132:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 152:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 225:
                  if (curChar == 60)
                     jjCheckNAddStates(19, 22);
                  break;
               case 226:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(226, 227);
                  break;
               case 227:
                  if (curChar == 61 && kind > 306)
                     kind = 306;
                  break;
               case 228:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(228, 229);
                  break;
               case 229:
                  if (curChar == 62 && kind > 307)
                     kind = 307;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjCheckNAddStates(10, 16);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(231, 36);
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(232, 233);
                  break;
               case 233:
                  if (curChar != 46)
                     break;
                  if (kind > 311)
                     kind = 311;
                  jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 235:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(236);
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 311)
                     kind = 311;
                  jjCheckNAdd(236);
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(237, 238);
                  break;
               case 239:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(240);
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 311)
                     kind = 311;
                  jjCheckNAdd(240);
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjCheckNAdd(241);
                  break;
               case 242:
                  if (curChar == 47)
                     jjAddStates(17, 18);
                  break;
               case 244:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 245:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 246:
                  if (curChar == 42)
                     jjCheckNAddStates(41, 43);
                  break;
               case 247:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(248, 246);
                  break;
               case 248:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(248, 246);
                  break;
               case 249:
                  if (curChar == 47 && kind > 317)
                     kind = 317;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 41:
               case 52:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 111:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 5:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 182:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(120);
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(115);
                  break;
               case 203:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 257:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 256:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  else if (curChar == 93)
                  {
                     if (kind > 322)
                        kind = 322;
                  }
                  break;
               case 117:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 188:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(44, 45);
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 20:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 280)
                        kind = 280;
                  }
                  break;
               case 3:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 88:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 91:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 255:
               case 35:
                  if (curChar == 124 && kind > 309)
                     kind = 309;
                  break;
               case 251:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(54);
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  break;
               case 25:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 159:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 252:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  break;
               case 107:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 18:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 90:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 23:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 112:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 160:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 183:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 6:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 89:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 110:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 21:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(79, 80);
                  else if (curChar == 96)
                     jjCheckNAdd(76);
                  else if (curChar == 124)
                     jjAddStates(46, 47);
                  if ((0x24402400244024L & l) != 0L)
                     jjCheckNAdd(54);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(48, 54);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(55, 59);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(60, 62);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(63, 64);
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(10);
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  else if ((0x400000004000L & l) != 0L)
                     jjAddStates(68, 69);
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 189:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  break;
               case 171:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 24:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 108:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 258:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 318)
                        kind = 318;
                     jjCheckNAdd(52);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x8000000080000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 11:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x400000004000L & l) != 0L && kind > 280)
                     kind = 280;
                  break;
               case 13:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 33:
                  if (curChar == 124)
                     jjAddStates(46, 47);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 314)
                     kind = 314;
                  jjCheckNAdd(46);
                  break;
               case 49:
                  if (kind > 316)
                     kind = 316;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x24402400244024L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 57:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 61:
                  jjCheckNAddStates(26, 28);
                  break;
               case 63:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  jjAddStates(77, 78);
                  break;
               case 71:
                  jjAddStates(79, 80);
                  break;
               case 75:
                  if (curChar == 96)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar == 96 && kind > 322)
                     kind = 322;
                  break;
               case 78:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 79:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 93 && kind > 322)
                     kind = 322;
                  break;
               case 81:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 82:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if ((0x4000000040000L & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 85:
               case 96:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 86:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 92:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 99:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 105:
                  if ((0x10000000100L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 106:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 113:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(60, 62);
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 116:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(115);
                  break;
               case 118:
                  if ((0x200000002000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 119:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 125:
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 126:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(127);
                  break;
               case 129:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L && kind > 310)
                     kind = 310;
                  break;
               case 134:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 138:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 141:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 145:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(127);
                  break;
               case 147:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 153:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 154:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(55, 59);
                  break;
               case 156:
                  if ((0x1000000010L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 157:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 161:
                  if ((0x10000000100000L & l) != 0L && kind > 230)
                     kind = 230;
                  break;
               case 162:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x100000001000L & l) != 0L && kind > 230)
                     kind = 230;
                  break;
               case 167:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x4000000040000L & l) != 0L && kind > 280)
                     kind = 280;
                  break;
               case 169:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x8000000080L & l) != 0L && kind > 280)
                     kind = 280;
                  break;
               case 174:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(48, 54);
                  break;
               case 184:
                  if ((0x1000000010000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 185:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 190:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x400000004000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 193:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x200000002000L & l) != 0L && kind > 280)
                     kind = 280;
                  break;
               case 204:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 206:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 208:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x400000004000000L & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 216:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 234:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 238:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 245:
                  jjCheckNAddTwoStates(245, 246);
                  break;
               case 247:
               case 248:
                  jjCheckNAddTwoStates(248, 246);
                  break;
               case 250:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
               case 52:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 41:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 111:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 182:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 203:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 257:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 256:
               case 79:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 117:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 188:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 20:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 88:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 91:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 251:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 159:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 252:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 107:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 90:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 112:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 160:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 183:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 89:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 110:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 189:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 171:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 24:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 258:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 318)
                     kind = 318;
                  jjCheckNAdd(52);
                  break;
               case 49:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 316)
                     kind = 316;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(23, 25);
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(26, 28);
                  break;
               case 68:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(77, 78);
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(79, 80);
                  break;
               case 76:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(29, 30);
                  break;
               case 245:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 247:
               case 248:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(248, 246);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 252 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   55, 57, 58, 60, 61, 58, 121, 124, 125, 152, 231, 36, 232, 233, 237, 238, 
   241, 243, 244, 226, 227, 228, 229, 55, 57, 58, 60, 61, 58, 76, 77, 83, 
   86, 95, 97, 128, 143, 130, 139, 132, 136, 246, 247, 249, 145, 151, 34, 35, 
   183, 191, 201, 204, 206, 214, 224, 160, 165, 167, 172, 180, 117, 119, 154, 108, 
   113, 10, 8, 251, 91, 103, 121, 125, 152, 39, 40, 42, 43, 68, 69, 71, 
   73, 235, 236, 239, 240, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\46\46", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\54", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\75\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\73", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\75", "\56", "\72", "\52", "\77", 
"\41", "\53", "\76", "\74", "\100\100", "\176", "\176\52", "\41\176", "\41\176\52", 
"\100\76", "\74\100", "\77\174", "\77\46", "\55", "\55\43", "\74\55\76", "\74\43\76", 
"\72\75", "\174", "\46", "\74\74", "\76\76", "\57", "\45", "\136", "\133", "\135", null, 
"\175", null, null, "\72\72", "\100", "\55\76", "\55\76\76", "\43\76", "\43\76\76", 
null, null, null, null, "\173", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x45ffffffffffffffL, 0x7fffffffffffff6L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x3000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x3000000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[252];
private final int[] jjstateSet = new int[504];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SmartQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SmartQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 252; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 322 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
         matchedToken.image = "[";
         for (int i=0;i<SmartQLParserConstants.tokenImage.length;i++) {
            if (SmartQLParserConstants.tokenImage[i].equals("\"[\"")) {
                matchedToken.kind = i;
            }
         }
         input_stream.backup(image.length() - 1);
       }
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
